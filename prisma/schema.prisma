datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMINISTRATOR
  MANAGER
  USER
}

enum Locale {
  GB
  VI
}

enum PostType {
  NORMAL
  LONGFORM
  VIDEO
}

enum TableField {
  title
  slug
  url
  description
}

enum ArticleType {
  TAG
  LINK
}

// post: id, ownerPost, postRevisionID
// postRevisions: postId (ref Post), id , owner
// postReview: postId, postRevisionID
// postSchedule: postReviewID, startAt

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?

  role            UserRole                 @default(USER)
  posts           Post[]
  postRevisions   PostRevision[]
  postSchedules   PostSchedule[]
  postReviews     PostReview[]
  revisionAuthors PostRevisionsOnAuthors[]
  postAuthors     PostsOnAuthors[]
}

model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  name      String
  orgId     String

  postTags    PostsOnTags[]
  revisonTags PostRevisonsOnTags[]
  titles      FieldLocale[]
  portals     PortalSubsOnTags[]

  @@unique([orgId, name])
}

model FieldLocale {
  id             String     @id @default(uuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  createdBy      String?
  tagId          String?
  portalId       String?
  portalSubId    String?
  linkExternalId String?
  lang           Locale
  field          TableField
  value          String

  tag          Tag?          @relation(fields: [tagId], references: [id])
  portal       Portal?       @relation(fields: [portalId], references: [id])
  portalSub    PortalSub?    @relation(fields: [portalSubId], references: [id])
  linkExternal LinkExternal? @relation(fields: [linkExternalId], references: [id])

  @@unique([tagId, lang, field])
  @@unique([portalId, lang, field])
  @@unique([portalSubId, lang, field])
  @@unique([linkExternalId, lang, field])
}

model PostsOnTags {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  postId    String
  tagId     String

  post Post @relation(fields: [postId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@unique([postId, tagId])
}

model PostRevisonsOnTags {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String?
  revisionId String
  tagId      String

  revision PostRevision @relation(fields: [revisionId], references: [id])
  tag      Tag          @relation(fields: [tagId], references: [id])

  @@unique([revisionId, tagId])
}

model PostsOnAuthors {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  postId    String

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [createdBy], references: [id])

  @@unique([createdBy, postId])
}

model PostRevisionsOnAuthors {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String
  revisionId String

  revision PostRevision @relation(fields: [revisionId], references: [id])
  user     User         @relation(fields: [createdBy], references: [id])

  @@unique([createdBy, revisionId])
}

model Post {
  id                  String   @id @default(uuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  createdBy           String
  locale              Locale   @default(GB)
  publishedRevisionId String?  @unique
  latestedRevisionId  String?  @unique
  primaryId           String?
  type                PostType @default(NORMAL)

  primary           Post?               @relation("PostLocalization", fields: [primaryId], references: [id])
  locales           Post[]              @relation("PostLocalization")
  user              User                @relation(fields: [createdBy], references: [id])
  authors           PostsOnAuthors[]
  reviews           PostReview[]
  revisions         PostRevision[]      @relation("PostRevisions")
  latestedRevision  PostRevision?       @relation("PostLatestRevision", fields: [latestedRevisionId], references: [id])
  publishedRevision PostRevision?       @relation("PostPublishedRevision", fields: [publishedRevisionId], references: [id])
  tags              PostsOnTags[]
  portals           PortalSubsOnPosts[]
}

model PostRevision {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  postId    String

  user            User                     @relation(fields: [createdBy], references: [id])
  post            Post                     @relation("PostRevisions", fields: [postId], references: [id])
  latestedPost    Post?                    @relation("PostLatestRevision")
  publishedPost   Post?                    @relation("PostPublishedRevision")
  postReview      PostReview?
  revisionAuthors PostRevisionsOnAuthors[]
  revisonTags     PostRevisonsOnTags[]
  data            RevisionData?
}

model RevisionData {
  id                      String       @id @default(uuid())
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  createdBy               String
  revisionId              String       @unique
  slug                    String       @unique
  title                   String
  imageLight              String
  imageDark               String
  coverLight              String
  coverDark               String
  content                 String
  note                    String?
  blockContent            Json
  seoTitle                String
  seoDescription          String
  seoKeyword              String
  seoImage                String
  seoslug                 String
  altImage                String
  selectedTokens          String[]
  universalLink           String
  designer                String
  showDisclaimer          Boolean
  pdfContent              String
  domain                  String
  youtubeUrl              String?
  videoDuration           String?
  backgroundColor         String
  backgroundGradientLight String
  backgroundGradientDark  String
  onlySigninUser          Boolean
  showAudio               Boolean
  postRevisionId          String       @unique
  postRevision            PostRevision @relation(fields: [postRevisionId], references: [id])
}

model PostReview {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
  postId         String
  postRevisionId String    @unique()
  approvedAt     DateTime?
  rejectedAt     DateTime?

  post          Post           @relation(fields: [postId], references: [id])
  user          User           @relation(fields: [createdBy], references: [id])
  postRevision  PostRevision   @relation(fields: [postRevisionId], references: [id])
  postSchedules PostSchedule[]

  @@unique([postId, postRevisionId])
}

model PostSchedule {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  postReviewId String
  startAt      DateTime

  user       User       @relation(fields: [createdBy], references: [id])
  postReview PostReview @relation(fields: [postReviewId], references: [id])
}

model Portal {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  orgId     String
  order     Int
  isAlpha   Boolean  @default(false)

  PortalSub PortalSub[]
  data      FieldLocale[] // title, slug
}

model PortalSub {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String?
  portalId    String
  order       Int
  articleType ArticleType

  portal        Portal              @relation(fields: [portalId], references: [id])
  data          FieldLocale[] // title, slug
  linkExternals LinkExternal[]
  linkInternals PortalSubsOnPosts[]
  tags          PortalSubsOnTags[]
}

model PortalSubsOnPosts {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  postId      String
  portalSubId String

  post      Post      @relation(fields: [postId], references: [id])
  portalSub PortalSub @relation(fields: [portalSubId], references: [id])

  @@unique([portalSubId, postId])
}

model PortalSubsOnTags {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  tagId       String
  portalSubId String

  tag       Tag       @relation(fields: [tagId], references: [id])
  portalSub PortalSub @relation(fields: [portalSubId], references: [id])

  @@unique([portalSubId, tagId])
}

model LinkExternal {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String?
  portalSubId String
  image       String
  data        FieldLocale[] // url, title, description

  portalSub PortalSub @relation(fields: [portalSubId], references: [id])
}
