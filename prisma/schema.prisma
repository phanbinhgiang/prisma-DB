datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMINISTRATOR
  MANAGER
  USER
}

enum Locale {
  GB
  VI
}

enum PostType {
  NORMAL
  LONGFORM
  VIDEO
}

enum TableFieldLocale {
  title
  slug
  url
  description
  content
  link
}

enum ArticleType {
  TAG
  LINK
}

enum MenuType {
  Portal
  Menu
  Series
}

enum InteractionPostType {
  VIEW
  LIKE
  BOOKMARK
  RATING
  COMMENT
}

enum InteractionOrganizationType {
  FOLLOW
  LIKE
}

enum InteractionSeriesType {
  FOLLOW
  LIKE
}

// post: id, ownerPost, postRevisionID
// postRevisions: postId (ref Post), id , owner
// postReview: postId, postRevisionID
// postSchedule: postReviewID, startAt

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?

  role                     UserRole                  @default(USER)
  posts                    Post[]
  postRevisions            PostRevision[]
  postSchedules            PostSchedule[]
  postReviews              PostReview[]
  revisionAuthors          PostRevisionsOnAuthors[]
  postAuthors              PostsOnAuthors[]
  organizations            Organization[]
  roles                    UsersOnRoles[]
  menus                    Menu[]
  coursesMembers           CoursesOnMembers[]        @relation("CourseMembers")
  coursesBuyers            CoursesOnMembers[]        @relation("CourseBuyers")
  interactionPosts         InteractionPost[]
  interactionOrganizations InteractionOrganization[]
  interactionSeries        InteractionSeries[]
}

model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  name      String
  orgId     String

  organization Organization         @relation(fields: [orgId], references: [id])
  posts        PostsOnTags[]
  revisons     PostRevisonsOnTags[]
  titles       FieldLocale[] // title
  portals      PortalSubsOnTags[]
  menus        TagsOnMenus[]
  menuItems    TagsOnMenuItems[]

  @@unique([orgId, name])
}

model FieldLocale {
  id             String           @id @default(uuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  createdBy      String?
  tagId          String?
  portalId       String?
  portalSubId    String?
  linkExternalId String?
  menuId         String?
  menuItemId     String?
  lang           Locale
  field          TableFieldLocale
  value          String

  tag          Tag?          @relation(fields: [tagId], references: [id])
  portal       Portal?       @relation(fields: [portalId], references: [id])
  portalSub    PortalSub?    @relation(fields: [portalSubId], references: [id])
  linkExternal LinkExternal? @relation(fields: [linkExternalId], references: [id])
  menu         Menu?         @relation(fields: [menuId], references: [id])
  menuItem     MenuItem?     @relation(fields: [menuItemId], references: [id])

  @@unique([tagId, lang, field])
  @@unique([portalId, lang, field])
  @@unique([portalSubId, lang, field])
  @@unique([linkExternalId, lang, field])
  @@unique([menuId, lang, field])
}

model PostsOnTags {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  postId    String
  tagId     String

  post Post @relation(fields: [postId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@unique([postId, tagId])
}

model PostRevisonsOnTags {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String?
  revisionId String
  tagId      String

  revision PostRevision @relation(fields: [revisionId], references: [id])
  tag      Tag          @relation(fields: [tagId], references: [id])

  @@unique([revisionId, tagId])
}

model PostsOnAuthors {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  postId    String
  userId    String

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([createdBy, postId])
}

model PostRevisionsOnAuthors {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String
  revisionId String

  revision PostRevision @relation(fields: [revisionId], references: [id])
  user     User         @relation(fields: [createdBy], references: [id])

  @@unique([createdBy, revisionId])
}

model Post {
  id                  String   @id @default(uuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  createdBy           String
  locale              Locale   @default(GB)
  publishedRevisionId String?  @unique
  latestedRevisionId  String?  @unique
  primaryId           String?
  type                PostType @default(NORMAL)
  orgId               String

  primary              Post?               @relation("PostLocalization", fields: [primaryId], references: [id])
  locales              Post[]              @relation("PostLocalization")
  user                 User                @relation(fields: [createdBy], references: [id])
  authors              PostsOnAuthors[]
  reviews              PostReview[]
  revisions            PostRevision[]      @relation("PostRevisions")
  latestedRevision     PostRevision?       @relation("PostLatestRevision", fields: [latestedRevisionId], references: [id])
  publishedRevision    PostRevision?       @relation("PostPublishedRevision", fields: [publishedRevisionId], references: [id])
  organization         Organization        @relation(fields: [orgId], references: [id])
  tags                 PostsOnTags[]
  portals              PortalSubsOnPosts[]
  interactionViewPosts InteractionPost[]
}

model TagsOnMenus {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  tagId     String
  menuId    String

  tag        Tag     @relation(fields: [tagId], references: [id])
  menu       Menu    @relation(fields: [menuId], references: [id])
  menuItemId String?

  @@unique([tagId, menuId])
}

model TagsOnMenuItems {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String?
  tagId      String
  menuItemId String

  tag      Tag      @relation(fields: [tagId], references: [id])
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@unique([tagId, menuItemId])
}

model Menu {
  id               String        @id @default(uuid())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  createdBy        String?
  orgId            String
  type             MenuType
  order            Int
  dataLocale       FieldLocale[] // title, slug, description
  arrTitleLatinize String[]
  image            String?

  user              User?               @relation(fields: [createdBy], references: [id])
  organization      Organization        @relation(fields: [orgId], references: [id])
  portals           Portal[]
  menuItems         MenuItem[]
  tags              TagsOnMenus[]
  interactionSeries InteractionSeries[]

  @@unique([orgId, order])
}

// series or menu child
model MenuItem {
  id               String        @id @default(uuid())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  createdBy        String?
  menuId           String
  itemOrder        Int
  dataLocale       FieldLocale[] // title, slug, description
  arrTitleLatinize String[]

  menu Menu              @relation(fields: [menuId], references: [id])
  tags TagsOnMenuItems[]

  @@unique([menuId, itemOrder])
}

model PostRevision {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  postId    String

  user            User                     @relation(fields: [createdBy], references: [id])
  post            Post                     @relation("PostRevisions", fields: [postId], references: [id])
  latestedPost    Post?                    @relation("PostLatestRevision")
  publishedPost   Post?                    @relation("PostPublishedRevision")
  postReview      PostReview?
  revisionAuthors PostRevisionsOnAuthors[]
  revisonTags     PostRevisonsOnTags[]
  data            RevisionData?
}

model RevisionData {
  id                      String   @id @default(uuid())
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  createdBy               String
  revisionId              String   @unique
  slug                    String   @unique
  title                   String
  imageLight              String
  imageDark               String
  coverLight              String
  coverDark               String
  content                 String
  note                    String?
  blockContent            Json
  seoTitle                String
  seoDescription          String
  seoKeyword              String
  seoImage                String
  seoslug                 String
  altImage                String
  selectedTokens          String[]
  universalLink           String
  designer                String
  showDisclaimer          Boolean
  pdfContent              String
  domain                  String
  youtubeUrl              String?
  videoDuration           String?
  backgroundColor         String
  backgroundGradientLight String
  backgroundGradientDark  String
  onlySigninUser          Boolean
  showAudio               Boolean
  postRevisionId          String   @unique

  postRevision PostRevision @relation(fields: [postRevisionId], references: [id])
}

model PostReview {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
  postId         String
  postRevisionId String    @unique()
  approvedAt     DateTime?
  rejectedAt     DateTime?

  post          Post           @relation(fields: [postId], references: [id])
  user          User           @relation(fields: [createdBy], references: [id])
  postRevision  PostRevision   @relation(fields: [postRevisionId], references: [id])
  postSchedules PostSchedule[]

  @@unique([postId, postRevisionId])
}

model PostSchedule {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  postReviewId String
  startAt      DateTime

  user       User       @relation(fields: [createdBy], references: [id])
  postReview PostReview @relation(fields: [postReviewId], references: [id])
}

model Portal {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  orgId     String
  order     Int
  isAlpha   Boolean  @default(false)
  menuId    String

  organization Organization  @relation(fields: [orgId], references: [id])
  menu         Menu          @relation(fields: [menuId], references: [id])
  PortalSub    PortalSub[]
  dataLocale   FieldLocale[] // title, slug

  @@unique([orgId, order])
}

model PortalSub {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String?
  portalId    String
  order       Int
  articleType ArticleType

  portal        Portal              @relation(fields: [portalId], references: [id])
  dataLocale    FieldLocale[] // title, slug
  linkExternals LinkExternal[]
  linkInternals PortalSubsOnPosts[]
  tags          PortalSubsOnTags[]

  @@unique([portalId, order])
}

model PortalSubsOnPosts {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  postId      String
  portalSubId String

  post      Post      @relation(fields: [postId], references: [id])
  portalSub PortalSub @relation(fields: [portalSubId], references: [id])

  @@unique([portalSubId, postId])
}

model PortalSubsOnTags {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  tagId       String
  portalSubId String

  tag       Tag       @relation(fields: [tagId], references: [id])
  portalSub PortalSub @relation(fields: [portalSubId], references: [id])

  @@unique([portalSubId, tagId])
}

model LinkExternal {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String?
  portalSubId String
  image       String
  dataLocale  FieldLocale[] // url, title, description

  portalSub PortalSub @relation(fields: [portalSubId], references: [id])
}

model Organization {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?
  name            String
  description     String
  image           String
  logo            String
  logoLight       String
  favicon         String
  icon            String
  coverImage      String
  userName        String   @unique
  domain          String
  locales         Locale[]
  socialShare     Json
  showDescription Boolean  @default(true)
  type            String?

  user         User?                     @relation(fields: [createdBy], references: [id])
  posts        Post[]
  socials      Social[]
  settings     SettingOrganizaion[]
  tags         Tag[]
  portals      Portal[]
  roles        Role[]
  menus        Menu[]
  courses      Course[]
  interactions InteractionOrganization[]
}

model SettingOrganizaion {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  orgId     String
  name      String
  value     String

  organization Organization @relation(fields: [orgId], references: [id])

  @@unique([orgId, name])
}

model Social {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  orgId     String
  name      String
  url       String

  organization Organization @relation(fields: [orgId], references: [id])

  @@unique([orgId, name])
}

model UsersOnRoles {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  userId    String
  roleId    String

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
}

model Role {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  name      String
  orgId     String

  organization Organization   @relation(fields: [orgId], references: [id])
  permissions  Permission[]
  users        UsersOnRoles[]

  @@unique([orgId, name])
}

model Permission {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  name      String
  roleId    String

  role Role @relation(fields: [roleId], references: [id])

  @@unique([roleId, name])
}

model Course {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String?
  slug           String   @unique
  title          String
  imageLight     String
  imageDark      String
  description    String
  orgId          String
  lang           Locale   @default(GB)
  utilities      String[]
  price          Float
  specialPrice   Float
  seoTitle       String
  seoDescription String
  seoKeyword     String
  seoslug        String
  startAt        DateTime
  endAt          DateTime
  status         String

  organization Organization       @relation(fields: [orgId], references: [id])
  members      CoursesOnMembers[]
  chapters     Chapter[]
}

model CoursesOnMembers {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  userId    String
  courseId  String
  message   String?
  buyerId   String

  user    User               @relation("CourseMembers", fields: [userId], references: [id])
  buyer   User               @relation("CourseBuyers", fields: [buyerId], references: [id])
  Course  Course             @relation(fields: [courseId], references: [id])
  lessons LessonsOnMembers[]

  @@unique([userId, courseId])
}

model Chapter {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  courseId  String
  title     String
  order     Int
  lessons   Lesson[]

  course Course @relation(fields: [courseId], references: [id])

  @@unique([courseId, order])
}

model LessonsOnMembers {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String?
  courseMemberId String
  lessonId       String
  courseId       String
  status         String

  courseMember CoursesOnMembers @relation(fields: [courseMemberId], references: [id])
  lesson       Lesson           @relation(fields: [lessonId], references: [id])

  @@unique([courseMemberId, lessonId])
}

model Lesson {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   String?
  chapterId   String
  title       String
  order       Int
  video       String
  discription String
  duration    String
  documents   Document[]

  chapter Chapter            @relation(fields: [chapterId], references: [id])
  members LessonsOnMembers[]

  @@unique([chapterId, order])
}

model Document {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  title     String
  link      String
  lessonId  String

  lesson Lesson @relation(fields: [lessonId], references: [id])
}

model InteractionPost {
  id              String              @id @default(uuid())
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  createdBy       String?
  postId          String
  userId          String
  type            InteractionPostType
  rating          Int?
  comment         String?
  fatherCommentId String?

  fatherComment   InteractionPost?  @relation("RelatedComment", fields: [fatherCommentId], references: [id])
  relatedComments InteractionPost[] @relation("RelatedComment")
  post            Post              @relation(fields: [postId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
}

model InteractionOrganization {
  id        String                      @id @default(uuid())
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt
  createdBy String?
  orgId     String
  userId    String
  type      InteractionOrganizationType

  organization Organization @relation(fields: [orgId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
}

model InteractionSeries {
  id        String                @id @default(uuid())
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  createdBy String?
  seriesId  String
  userId    String
  type      InteractionSeriesType

  series Menu @relation(fields: [seriesId], references: [id])
  user   User @relation(fields: [userId], references: [id])
}
