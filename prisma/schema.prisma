datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMINISTRATOR
  MANAGER
  USER
}

enum PostLocale {
  GB
  VI
}

enum PostType {
  NORMAL
  LONGFORM
  VIDEO
}

// post: id, ownerPost, postRevisionID
// postRevisions: postId (ref Post), id , owner
// postReview: postId, postRevisionID
// postSchedule: postReviewID, startAt

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?

  role            UserRole         @default(USER)
  posts           Post[]
  postRevisions   PostRevision[]
  postSchedules   PostSchedule[]
  postReviews     PostReview[]
  revisionAuthors RevisionAuthor[]
  postAuthors     PostAuthor[]
  Tag             Tag[]
}

model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  title     Json
  name      String
  orgId     String

  user       User         @relation(fields: [createdBy], references: [id])
  postTags   PostTag[]
  RevisonTag RevisonTag[]

  @@unique([orgId, name])
}

model PostTag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  postId    String
  tagId     String

  post Post @relation(fields: [postId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@unique([postId, tagId])
}

model RevisonTag {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String
  revisionId String
  tagId      String

  revision PostRevision @relation(fields: [revisionId], references: [id])
  tag      Tag          @relation(fields: [tagId], references: [id])

  @@unique([revisionId, tagId])
}

model Post {
  id                  String     @id @default(uuid())
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  createdBy           String
  locale              PostLocale @default(GB)
  publishedRevisionId String?    @unique
  latestedRevisionId  String?    @unique
  primaryId           String?
  type                PostType   @default(NORMAL)

  primary           Post?          @relation("PostLocalization", fields: [primaryId], references: [id])
  locales           Post[]         @relation("PostLocalization")
  user              User           @relation(fields: [createdBy], references: [id])
  authors           PostAuthor[]
  reviews           PostReview[]
  revisions         PostRevision[] @relation("PostRevisions")
  latestedRevision  PostRevision?  @relation("PostLatestRevision", fields: [latestedRevisionId], references: [id])
  publishedRevision PostRevision?  @relation("PostPublishedRevision", fields: [publishedRevisionId], references: [id])
  postTags          PostTag[]
}

model PostRevision {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  postId    String

  user            User             @relation(fields: [createdBy], references: [id])
  post            Post             @relation("PostRevisions", fields: [postId], references: [id])
  latestedPost    Post?            @relation("PostLatestRevision")
  publishedPost   Post?            @relation("PostPublishedRevision")
  postReview      PostReview?
  revisionAuthors RevisionAuthor[]
  revisonTags     RevisonTag[]
  detail          RevisionDetail   @relation(fields: [id], references: [revisionId])
}

model RevisionDetail {
  id                      String         @id @default(uuid())
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  createdBy               String
  revisionId              String         @unique
  slug                    String         @unique
  title                   String
  imageLight              String
  imageDark               String
  coverLight              String
  coverDark               String
  content                 String
  note                    String?
  blockContent            Json
  seoTitle                String
  seoDescription          String
  seoKeyword              String
  seoImage                String
  seoslug                 String
  altImage                String
  selectedTokens          String[]
  universalLink           String
  designer                String
  showDisclaimer          Boolean
  pdfContent              String
  domain                  String
  youtubeUrl              String?
  videoDuration           String?
  backgroundColor         String
  backgroundGradientLight String
  backgroundGradientDark  String
  onlySigninUser          Boolean
  showAudio               Boolean
  PostRevision            PostRevision[]
}

model PostAuthor {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  postId    String

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [createdBy], references: [id])

  @@unique([createdBy, postId])
}

model RevisionAuthor {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String
  revisionId String

  revision PostRevision @relation(fields: [revisionId], references: [id])
  user     User         @relation(fields: [createdBy], references: [id])

  @@unique([createdBy, revisionId])
}

model PostReview {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
  postId         String
  postRevisionId String    @unique()
  approvedAt     DateTime?
  rejectedAt     DateTime?

  post          Post           @relation(fields: [postId], references: [id])
  user          User           @relation(fields: [createdBy], references: [id])
  postRevision  PostRevision   @relation(fields: [postRevisionId], references: [id])
  postSchedules PostSchedule[]

  @@unique([postId, postRevisionId])
}

model PostSchedule {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  postReviewId String
  startAt      DateTime

  user       User       @relation(fields: [createdBy], references: [id])
  postReview PostReview @relation(fields: [postReviewId], references: [id])
}
